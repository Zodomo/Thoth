import { useContractReader } from "eth-hooks";
import { ethers } from "ethers";
import React from "react";
import { Link } from "react-router-dom";

/**
 * web3 props can be passed from '../App.jsx' into your local view component for use
 * @param {*} yourLocalBalance balance on current network
 * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/
 * @returns react component
 **/
function Home({ yourLocalBalance, readContracts }) {
  // you can also use hooks locally in your component of choice
  // in this case, let's keep track of 'purpose' variable from our contract
  const purpose = useContractReader(readContracts, "TwoPartyContract", "purpose");

  return (
    <div>
      <div style={{ margin: 32 }}>
        This is the Thoth frontend.
      </div>
      <div style={{ margin: 32 }}>
        Interact with the smart contract using{" "}
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          Debug Contracts
        </span>{" "}
        for now.
      </div>
      <div style={{ margin: 32 }}>
        Signing functionality will need to be built as that is done off-chain.
      </div>
      <div style={{ margin: 32 }}>
        App flow is as follows:
      </div>
      <div style={{ margin: 32 }}>
        1. Hash contract details{" "}
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          (Party1 Account, Party2 Account, IPFS Pointer to Contract Document, Block Number Agreement Proposed In)
        </span>{" "}
        using{" "}
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          getMessageHash()
        </span>{" "}
      </div>
      <div style={{ margin: 32 }}>
        2. Hash{" "}
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          getMessageHash()
        </span>{" "}
        output using{" "}
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          getEthSignedMessageHash()
        </span>{" "}
        to structure data for signature and store hash output in{" "}
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          twoPartyContracts
        </span>{" "}
        mapping
      </div>
      <div style={{ margin: 32 }}>
        NOTE:{" "}
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          createTwoPartyContract()
        </span>{" "}
        performs steps 1 and 2
      </div>
      <div style={{ margin: 32 }}>
        3. Sign{" "}
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          getEthSignedMessageHash()
        </span>{" "}
        output stored in{" "}
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          twoPartyContracts
        </span>{" "}
        using wallet.
      </div>
      <div style={{ margin: 32}}>
        NOTE: This front-end feature has not been built yet. Substitute https://signator.io/ for now.
      </div>
      <div style={{ margin: 32 }}>
        4. Commit signature from step 3 to blockchain.
      </div>
      <div style={{ margin: 32}}>
        NOTE: The Solidity function for this step has not been built yet as signature verification is not working.
      </div>
      <div style={{ margin: 32 }}>
        5. Verify signature using{" "}
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          verifySignature()
        </span>{" "}
        on the hash stored in
        <span
          className="highlight"
          style={{ marginLeft: 4, /* backgroundColor: "#f9f9f9", */ padding: 4, borderRadius: 4, fontWeight: "bolder" }}
        >
          twoPartyContracts
        </span>{" "}
        and the signature generated by the frontend (not implemented yet)
      </div>
    </div>
  );
}

export default Home;
